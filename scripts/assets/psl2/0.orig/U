/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2012                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       volVectorField;
    object      U;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [0 1 -1 0 0 0 0];

internalField   uniform (0 0 0);

boundaryField
{
    default
    {
        type    slip;
    }

    top
    {
        type    pressureInletOutletVelocity;
        value   uniform (0 0 0);
    }


    bottom
    {
        type 	codedFixedValue;
        value   uniform (0 0 0);
        name    bottomUFixedValue;

        code
#{
    word patch_name = "bottom";
    label patch_id = this->patch().boundaryMesh().findPatchID(patch_name); 
    const auto& alpha_injection = 
        this->db().objectRegistry::lookupObject<volScalarField>("alpha_inj").boundaryField()[patch_id];
    const auto& alpha_injection_velocity = 
        this->db().objectRegistry::lookupObject<volScalarField>("alpha_inj_U").boundaryField()[patch_id];
    const auto& dsl_U = 
        this->db().objectRegistry::lookupObject<volVectorField>("dsl_U").boundaryField()[patch_id];
    const auto& front_sdf = 
        this->db().objectRegistry::lookupObject<volScalarField>("dsl_front_sdf").boundaryField()[patch_id];
    const fvPatch& boundaryPatch = patch(); 
    // surface normal field
    const vectorField& Nf = boundaryPatch.nf();
    const vectorField& Cf = boundaryPatch.Cf(); 
    vectorField& field = *this;
    forAll(Cf, i) {
        auto we = max(0, min(alpha_injection_velocity[i], 10));
        // Faces that inject mass must have their boundary conditions updated accordingly
        if(we > 0.01) {
            auto normal = (-Nf[i]).normalise();
            const scalar t = this->db().time().value();
            auto oscillation_factor = 1.0;
            if(front_sdf[i] < 4)
                oscillation_factor += 0.15 * std::abs(std::sin(4*t));

            field[i] = dsl_U[i] + oscillation_factor * we * normal;
            continue;
        }
        // Every other face follows the free slip condition
        field[i] = dsl_U[i];
    }
#};
    }

    inlet
    {
        //type            inletOutlet;
        //value           $internalField;
        //inletValue      uniform (0 0 0);
        type            pressureInletOutletVelocity;
        value           uniform (0 0 0);
    }

    outlet
    {
        //type            inletOutlet;
        //value           $internalField;
        //inletValue      uniform (0 0 0);
        type            pressureInletOutletVelocity;
        value           $internalField;
    }

    walls
    {
        type            empty;
    }
}

// ************************************************************************* //
