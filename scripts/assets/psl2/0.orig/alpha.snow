/*--------------------------------*- C++ -*----------------------------------*\
  | =========                 |                                                 |
  | \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
  |  \\    /   O peration     | Version:  v2012                                 |
  |   \\  /    A nd           | Website:  www.openfoam.com                      |
  |    \\/     M anipulation  |                                                 |
  \*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       volScalarField;
    object      alpha.snow;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [0 0 0 0 0 0 0];

internalField   uniform 0;

boundaryField
{
    default
    {
        type            zeroGradient;
    }

    top
    {
        type            inletOutlet;
        inletValue      uniform 0;
        value           uniform 0;
    }

    // bottom {
    //   	type fixedValue;
    //    	value $internalField;
    //    	type zeroGradient;
    //    }

    bottom
    {
        type 	codedFixedValue;
        value   uniform 0;

        name    dslFixedValue;

        code
#{
    word patch_name = "bottom";
    label patch_id = this->patch().boundaryMesh().findPatchID(patch_name); 
    const auto& alpha_injection = 
        this->db().objectRegistry::lookupObject<volScalarField>("alpha_inj").boundaryField()[patch_id];
    const auto& front_sdf = 
        this->db().objectRegistry::lookupObject<volScalarField>("dsl_front_sdf").boundaryField()[patch_id];
    const fvPatch& boundaryPatch = patch(); 
    const vectorField& Cf = boundaryPatch.Cf();
    scalarField& field = *this;

    const auto& internal_field = patchInternalField();
    forAll(Cf, i) {

        // here we apply Dirichlet on DSL faces and Neumann outside 
        field[i] = internal_field.ref()[i];

        // check if in DSL region
        if(front_sdf[i] < 1000)
            field[i] = alpha_injection[i];
    }
#};
    }

    inlet
    {
        type            inletOutlet;
        inletValue      uniform 0;
        value           uniform 0;
    }

    outlet
    {
        type            inletOutlet;
        inletValue      uniform 0;
        value           uniform 0;
    }

    walls
    {
        type            empty;
    }
}


// ************************************************************************* //
