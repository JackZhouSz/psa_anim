/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2012                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       volScalarField;
    object      alpha.snow;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [0 0 0 0 0 0 0];

internalField   uniform 0;

boundaryField
{
    default
    {
        type            zeroGradient;
    }

    top
    {
<<<TOP_CONDITIONS>>>
    }

    inlet
    {
<<<INLET_CONDITIONS>>>
    }

    outlet
    {
<<<OUTLET_CONDITIONS>>>
    }

    walls
    {
<<<WALLS_CONDITIONS>>>
    }

    terrain
    {
	type 	codedFixedValue;
	value   uniform 0;

	name    dslFixedValue;

	code
	#{
		word patch_name = "terrain";
		label patch_id = this->patch().boundaryMesh().findPatchID(patch_name);
		const auto& alpha_injection =
			this->db().objectRegistry::lookupObject<volScalarField>("alpha_inj").boundaryField()[patch_id];
		const auto& front_sdf =
			this->db().objectRegistry::lookupObject<volScalarField>("dsl_front_sdf").boundaryField()[patch_id];
		const fvPatch& boundaryPatch = patch();
		const vectorField& Cf = boundaryPatch.Cf();
		scalarField& field = *this;
		const auto& internal_field = patchInternalField();

		forAll(Cf, i) {
          // Dirichlet for all faces 
          field[i] = alpha_injection[i];

          // here we apply Dirichlet on DSL faces and Neumann outside
		      // field[i] = internal_field.ref()[i];

          // check if in DSL region
          // if(front_sdf[i] >= 0 && front_sdf[i] < 1000)
          //  field[i] = alpha_injection[i];
    }

    if(this->db().time().writeTime()) {
      FILE* debug_file = fopen((std::string("debug_data/a_variables_") + this->db().time().timeName()).c_str(), "w+");
      if(debug_file) {
        FILE* debug_file_labels = 
          fopen((std::string("debug_data/a_variables_labels")).c_str(), "w+");
        if(debug_file_labels) {
          fprintf(debug_file_labels, "i field alpha_injection\n");
          fclose(debug_file_labels);
        }

        forAll(Cf, i) {
          fprintf(debug_file, "%d %lf %lf\n",
              i,
              field[i],
              alpha_injection[i]
              );
        }
        fclose(debug_file);
      }
    }
	#};
    }
}


// ************************************************************************* //
