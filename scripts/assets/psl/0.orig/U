/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2012                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       volVectorField;
    object      U;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [0 1 -1 0 0 0 0];

internalField   uniform (0 0 0);

boundaryField
{
    default
    {
        type            slip;
    }

    top
    {
<<<TOP_CONDITIONS>>>
    }

    inlet
    {
<<<INLET_CONDITIONS>>>
    }

    outlet
    {
<<<OUTLET_CONDITIONS>>>
    }

    walls
    {
<<<WALLS_CONDITIONS>>>
    }

    terrain
    {
	type 	codedFixedValue;
	value   uniform (0 0 0);

	name    bottomUFixedValue;

	code
	#{
		word patch_name = "terrain";
		label patch_id = this->patch().boundaryMesh().findPatchID(patch_name);
		// const auto& alpha_injection =
		// this->db().objectRegistry::lookupObject<volScalarField>("alpha_inj").boundaryField()[patch_id];
		const auto& alpha_injection_velocity =
			this->db().objectRegistry::lookupObject<volScalarField>("alpha_inj_U").boundaryField()[patch_id];
		const auto& dsl_U =
			this->db().objectRegistry::lookupObject<volVectorField>("dsl_U").boundaryField()[patch_id];
		const auto& front_sdf =
			this->db().objectRegistry::lookupObject<volScalarField>("dsl_front_sdf").boundaryField()[patch_id];
		const fvPatch& boundaryPatch = this->patch();
		// surface normal field
		vectorField Nf = boundaryPatch.nf();
		const vectorField& Cf = boundaryPatch.Cf();
		vectorField& field = *this;

    forAll(Cf, i) {
      float front_weight = 0.0;
      float velocity_trigger = 0.0;

      if(front_sdf[i] >= 0 && front_sdf[i] < 10000) {
        float weight = std::exp(front_sdf[i] / 40);
        if(weight != 0)
          front_weight = 1.0 / weight;
      }

      float x = std::exp(-mag(dsl_U[i]) + 10);
      if(x >= 0)
        velocity_trigger = std::min(1.0, std::max(0.0, 1.0 / (1.0 + x))); 


      // Faces that inject mass must have their boundary conditions updated accordingly
      auto we = max(alpha_injection_velocity[i], 0);  
      // we = max(0, min(alpha_injection_velocity[i], 1.5 * mag(dsl_U[i])));
      // we = max(0, min(alpha_injection_velocity[i], 10));
      if(we > 0.01) {
        auto normal = (-Nf[i]).normalise();
        field[i] = we * normal + 0.15 * front_weight * velocity_trigger * dsl_U[i];

        // const scalar t = this->db().time().value();
        // auto oscillation_factor = 1.0;
        // if(front_sdf[i] < 40)
        // {
          //   oscillation_factor += 0.85 * std::abs(std::sin(6*t));
          //   oscillation_factor = max(1, oscillation_factor);
          // field[i] = we * normal + dsl_U[i]; //  * psl_u_entrainment_factor;
        // }


        continue;
      }

      // Every other face follows the free slip condition
      // field[i] = dsl_U[i];
      // Every other face follows the no slip condition
      field[i] = vector(0,0,0);
    }
 
    if(this->db().time().writeTime()) {
      FILE* debug_file = fopen((std::string("debug_data/u_variables_") + this->db().time().timeName()).c_str(), "w+");
      if(debug_file) {
        FILE* debug_file_labels = 
          fopen((std::string("debug_data/u_variables_labels")).c_str(), "w+");
        if(debug_file_labels) {
          fprintf(debug_file_labels, 
          "i "
          " we"
          " t"
          " oscillation_factor"
          " front_sdf"
          " alpha_injection_velocity"
          " dsl_U_x"
          " dsl_U_y"
          " dsl_U_z"
          " field_x"
          " field_y"
          " field_z"
          "\n");
          fclose(debug_file_labels);
        }
		    forAll(Cf, i) {
		      auto we = max(0, min(alpha_injection_velocity[i], 10));
          const scalar t = this->db().time().value();
          auto oscillation_factor = 1.0;
          if(we > 0.01) {
            if(front_sdf[i] < 4)
              oscillation_factor += 0.15 * std::abs(std::sin(4*t));
          } 
          fprintf(debug_file, "%d %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf\n",
            i,
            we,
            t,
            oscillation_factor,
            front_sdf[i],
            alpha_injection_velocity[i],
            dsl_U[i].x(),
            dsl_U[i].y(),
            dsl_U[i].z(),
            field[i].x(),
            field[i].y(),
            field[i].z()
            );
        }
        fclose(debug_file);
      }
    }
	#};
    }
}


// ************************************************************************* //
